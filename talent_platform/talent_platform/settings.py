"""
Django settings for talent_platform project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import stripe
from dotenv import load_dotenv

# Load environment variables first
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# DigitalOcean Spaces Configuration (S3-compatible)
USE_SPACES = os.getenv('USE_SPACES', 'False').lower() == 'true'

# AWS S3 Configuration
USE_S3 = os.getenv('USE_S3', 'False').lower() == 'true'

# Media file size limits
MAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100 MB maximum video size
MAX_IMAGE_SIZE = 10 * 1024 * 1024   # 10 MB maximum image size

if USE_S3:
    # AWS S3 settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', '')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN', f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_LOCATION = 'media'
    
    # Use S3 storage backend for media files
    DEFAULT_FILE_STORAGE = 'talent_platform.storage_backends.S3MediaStorage'
    
    # Public media URL
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

elif USE_SPACES:
    # S3/Spaces settings
    AWS_ACCESS_KEY_ID = os.getenv('SPACES_ACCESS_KEY', '')
    AWS_SECRET_ACCESS_KEY = os.getenv('SPACES_SECRET_KEY', '')
    AWS_STORAGE_BUCKET_NAME = os.getenv('SPACES_BUCKET_NAME', '')
    AWS_S3_ENDPOINT_URL = os.getenv('SPACES_ENDPOINT_URL', 'https://fra1.digitaloceanspaces.com')
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_DEFAULT_ACL = 'public-read'
    AWS_LOCATION = 'media'
    
    # Custom CDN domain configuration
    SPACES_CDN_URL = os.getenv('SPACES_CDN_URL', '')
    if SPACES_CDN_URL and SPACES_CDN_URL.startswith('https://cdn.gan7club.com'):
        AWS_S3_CUSTOM_DOMAIN = 'cdn.gan7club.com'
        MEDIA_URL = SPACES_CDN_URL
    else:
        AWS_S3_CUSTOM_DOMAIN = None
        MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.{AWS_S3_ENDPOINT_URL.split("://")[1]}/{AWS_LOCATION}/'
    
    # Use custom storage backend for media files
    DEFAULT_FILE_STORAGE = 'talent_platform.storage_backends.MediaStorage'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '7@aaku@q1$6&^xg6re*i&(_&@m69-#&^ql%sh^u9!96ljm#cq=')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

#ALLOWED_HOSTS = []


# Application definition
AUTH_USER_MODEL = 'users.BaseUser'

INSTALLED_APPS = [
    'users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'profiles',
    'corsheaders',
    'disposable_email_checker',
    'dashboard',
    'payments',
    'django_filters',
]





    
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'payments.middleware.UserTypeThrottlingMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = os.getenv('CORS_ORIGIN_ALLOW_ALL', 'False').lower() == 'true'
CORS_ALLOW_CREDENTIALS = True

# Development CORS settings (only used when DEBUG=True)
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://192.168.0.104:3000",
        "http://192.168.0.119:3000",
        "http://192.168.1.6:3000",
        "http://192.168.1.9:3000",
        "http://192.168.0.107:3000",
        "http://192.168.0.110:3000",
        "http://192.168.72.187:3000",
    ]
    
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://192.168.0.119:3000",
        "http://192.168.72.187:3000",
        "http://192.168.0.101:3000",
        "http://192.168.1.9:3000",
        "http://192.168.0.107:3000",
        "http://192.168.0.104:3000",
    ]
    
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        '192.168.1.104',
        '192.168.0.113',
        '192.168.0.108',
        '192.168.0.104',
        '192.168.0.110',
        '192.168.0.107',
        '192.168.72.187',
        '192.168.72.85',
    ]
else:
    # Production CORS settings
    CORS_ALLOWED_ORIGINS = [
        "https://gan7club.com",
        "https://www.gan7club.com",
        "https://app.gan7club.com",
    ]
    
    CSRF_TRUSTED_ORIGINS = [
        "https://gan7club.com",
        "https://www.gan7club.com",
        "https://api.gan7club.com",
        "https://app.gan7club.com",
    ]
    
    ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

# settings.py
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'
        
ROOT_URLCONF = 'talent_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'talent_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Check if DATABASE_URL is set (for deployment platforms)
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    # Parse DATABASE_URL for deployment platforms
    try:
        import dj_database_url
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL)
        }
    except ImportError:
        # Fallback to SQLite if dj-database-url is not installed
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Check for DigitalOcean database environment variables
    DO_DB_HOST = os.getenv('DO_DB_HOST')
    DO_DB_NAME = os.getenv('DO_DB_NAME')
    DO_DB_USER = os.getenv('DO_DB_USER')
    DO_DB_PASSWORD = os.getenv('DO_DB_PASSWORD')
    DO_DB_PORT = os.getenv('DO_DB_PORT', '25060')
    
    if DO_DB_HOST and DO_DB_NAME and DO_DB_USER and DO_DB_PASSWORD:
        # DigitalOcean managed database
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': DO_DB_NAME,
                'USER': DO_DB_USER,
                'PASSWORD': DO_DB_PASSWORD,
                'HOST': DO_DB_HOST,
                'PORT': DO_DB_PORT,
                'OPTIONS': {
                    'sslmode': 'require',
                },
            }
        }
    else:
        # Local development database
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.getenv('STATIC_ROOT', BASE_DIR / 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configuration
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'noreply@example.com'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.hostinger.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@gan7club.com')

# Security Settings
SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False').lower() == 'true'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '120/hour',              # Increased from 60
        'user': '600/hour',              # Increased from 300
        'talent_user': '1000/hour',      # Increased from 500
        'background_user': '1000/hour',  # Increased from 500
        'dashboard_user': '2000/hour',   # Increased from 1000
        'admin_dashboard_user': '10000/hour', # Increased from 5000
        'payment_endpoints': '120/hour', # Increased from 60
        'restricted_country': '200/hour', # Increased from 100
    }
}

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
}

# Stripe Configuration
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')

# Add to settings.py
STRIPE_PRICE_IDS = {
    'silver': os.getenv('STRIPE_PRICE_SILVER'),
    'gold': os.getenv('STRIPE_PRICE_GOLD'),
    'platinum': os.getenv('STRIPE_PRICE_PLATINUM'),
    'back_ground_jobs': os.getenv('STRIPE_PRICE_BACKGROUND_JOBS'),
}

# Stripe Price IDs
STRIPE_SILVER_PRICE_ID = os.getenv('STRIPE_SILVER_PRICE_ID')
STRIPE_GOLD_PRICE_ID = os.getenv('STRIPE_GOLD_PRICE_ID')
STRIPE_PLATINUM_PRICE_ID = os.getenv('STRIPE_PLATINUM_PRICE_ID')
STRIPE_VERIFICATION_PRICE_ID = os.getenv('STRIPE_VERIFICATION_PRICE_ID')
STRIPE_FEATURED_PRICE_ID = os.getenv('STRIPE_FEATURED_PRICE_ID')
STRIPE_CUSTOM_URL_PRICE_ID = os.getenv('STRIPE_CUSTOM_URL_PRICE_ID')
STRIPE_BACKGROUND_JOBS_PRICE_ID = os.getenv('STRIPE_BACKGROUND_JOBS_PRICE_ID')
STRIPE_BANDS_PRICE_ID = os.getenv('STRIPE_BANDS_PRICE_ID')

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name} {funcName}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'detailed',
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'profiles': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'profiles.talent_specialization_views': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'profiles.talent_specialization_serializers': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'payments': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Create logs directory if it doesn't exist
import os
logs_dir = BASE_DIR / 'logs'
logs_dir.mkdir(exist_ok=True)

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Performance optimizations
CONN_MAX_AGE = 60  # Database connection pooling

# Celery Configuration (optional)
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_ALWAYS_EAGER = os.getenv('CELERY_TASK_ALWAYS_EAGER', 'False').lower() == 'true'

# Email Settings - Enhanced
EMAIL_TIMEOUT = 30  # 30 seconds timeout for email sending
EMAIL_BACKEND_FALLBACK = 'django.core.mail.backends.console.EmailBackend'
